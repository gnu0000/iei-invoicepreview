// Handler for viewing invoice xml as a document
//
// text interpolation variables:
// This translate xml node attributes to values
//
// {selector @attribute}
// examples: 
//   <div> {MailingAddress @AddressLine1} </div>
//   <span> {InvoiceAccountInfo Account @EmailAddress} </span>

$(function() {
   var viewer = new InvoiceViewer();
});

function InvoiceViewer(){
   var self = this;

   this.Init = function(){
      //$.ajaxSetup({ cache: false });
      $(".card .droptarget").on("dragover dragenter drop", self.ClearEvent);
      $(".card .droptarget").on("drop" , self.GetFromDrop);
      $(".card .fromurl"   ).on("click", self.GetFromUrl);
      $(".card .fromtext"  ).on("click", self.GetFromText);
      self.StashTemplates();
      $(".render").hide();
      self.HandleHeader();
      self.GetInvoice();
   };

   this.StashTemplates = function() {
      self.templates = {};
      $("template").each((i, node) => {
         node = $(node);
         self.templates[node.attr("id")] = node.detach();
      });
   };

   this.HandleHeader = function() {
      if (!self.UrlParam("embed", "")) return;
      $(".header").replaceWith(self.templates["miniheader"].html());
      $(".card").addClass("headergap");
   };

   this.GetInvoice = function() {
      let url = self.UrlParam("url", "");
      if (url) return self.FetchInvoice(url);
      $(".render").hide();
      $(".source").show();
   };

   this.GetFromUrl = function() {
      self.FetchInvoice($(".source input").val().trim());
   };

   this.GetFromDrop = function(e) {
      let xfer = e.originalEvent.dataTransfer;
      if(xfer && xfer.files.length) self.UploadInvoice(xfer.files);
   };

   this.GetFromText = function() {
      let xmlText = $(".source textarea").val();
      xmlText = xmlText.replace(/^\s*{([\s\S]+)}\s*$/m, "$1"); //dev studio puts the text inside {}
      let parser = new DOMParser();
      let xmlDoc = parser.parseFromString(xmlText, "application/xml");
      self.RenderInvoice(xmlDoc);
   };

   this.FetchInvoice = async function(url) {
      //self.url = url;
      //$.ajax({url:self.url, dataType:"xml"}) // todo: make it TXT so we can handle errors
      //.done(self.RenderInvoice)
      //.fail(self.LoadedInvoiceFail);
      let response = await fetch(self.url = url);
      let xmlDoc = await response.text();
      self.RenderInvoice(xmlDoc);
   };

   this.UploadInvoice = function(files){
      let reader = new FileReader();
      reader.onload = (e) => {
         let xmlText = e.target.result.replace(/^\s*{([\s\S]+)}\s*$/m, "$1"); //dev studio puts the text inside {}
         let parser = new DOMParser();
         let xmlDoc = parser.parseFromString(xmlText, "application/xml");
         self.RenderInvoice(xmlDoc);
      }
      reader.readAsText(files[0]);
   };

   this.RenderInvoice = function(xmlDoc) {
      $(".source").hide();
      self.invoice = $(xmlDoc);
      if (self.XmlErrorCheck()) {
         $(".render").show();
         return;
      }
      self.Template();
      self.CreateMeterReads();
      self.CreateChargeDetailGroups();
      self.CreateFinalAmounts();
      self.CreateMessages();
      self.FinalTouchups();
      self.SpecialFixForBudgetBills();
      $(".render").show();
      $(".iconarea img").click(self.ToggleDebugView);
   };

   this.LoadedInvoiceFail = function(error) {
      $(".card").empty().html("<h2>Error loading xml file:</h2><h3>"+self.url+"</h3>");
   };

   this.CreateMeterReads = function() {
      let meterNum = self.invoice.find("ConstituentAccounts Account").attr("MeterNumber");
      self.invoice.find("Charge").each((i, xmlDom) => {
         xmlDom = $(xmlDom).attr("MeterNumber", meterNum);
         $(".meter table").append(self.Template("meterread", null, xmlDom));
      });
   };

   this.CreateChargeDetailGroups = function() {
      self.invoice.find("ChargeDetailGroup").each((i, xmlDom) => {
         xmlDom = $(xmlDom);
         let hide = xmlDom.attr("Title").match(/Debug/i) ? "hidden" : ""
         let cdg = self.Template("cdg", {hide}, xmlDom);
         self.CreateChargeDetails(cdg, xmlDom);
         $(".chargedetailgroups").append(cdg);
      });
   };

   this.CreateChargeDetails = function(cdg, xmlDom) {
      let cdarea = cdg.find(".cdarea");
      xmlDom.find("ChargeDetail").each((i, xmlCd) => {
         cdarea.append(self.Template("cd", null, $(xmlCd)));
      })
   };

   this.CreateFinalAmounts = function() {
      let finalAmounts = $(".finalamounts");
      self.invoice.find("FinalAmount").each((i, xmlDom) => {
         finalAmounts.append(self.Template("finalamount", null, $(xmlDom)));
      });
   };

   this.CreateMessages = function() {
      let messages = $(".messages");
      self.invoice.find("Message").each((i, xmlDom) => {
         //let hide = self.EvalDescriptor("@Location", $(xmlDom)) ? "" : "hidden";
         let type = self.EvalDescriptor("@Type", $(xmlDom)) || "";
         let hide = type.match(/AccountNotice/i) ? "" : "hidden";
         messages.append(self.Template("message", {hide}, $(xmlDom)));
      });
   };

   this.FinalTouchups = function() {
      if (self.invoice.find("Charge").length == 1 && self.invoice.find("Charge").attr("ReadBeginDate") == "")
         $(".days").addClass("hidden");
      if (self.invoice.find("InvoiceTotals").attr("DepositBalance") < 1)
         $(".deposit").addClass("hidden");
   };

   this.SpecialFixForBudgetBills = function() {
      let docTemplate = self.EvalDescriptor("DocumentInfo @DocumentTemplate", self.invoice);
      if (docTemplate.match(/GeorgiaIndividualBudgetInvoice/i)) {

         let amountDue = self.EvalDescriptor("InvoiceAmountSections TotalAmountDue @LevelAmount", self.invoice);
         $(".summary tr:nth-child(4) td:nth-child(2)").text(amountDue);

         let balanceForward = self.EvalDescriptor("InvoiceAmountSections BalanceForward @LevelAmount", self.invoice);
         $(".summary tr:nth-child(3) td:nth-child(2)").text(balanceForward);

         let currentCharges = self.EvalDescriptor("InvoiceAmountSections CurrentCharges @LevelAmount", self.invoice);
         $(".summary tr:nth-child(2) td:nth-child(2)").text(currentCharges);
      }
   };

   this.Template = function(name, data = {}, xml = self.invoice) {
      let html = name ? self.templates[name].html() : $("body").html();
      html = html.replace(/{{.+?}}/g, (m) => {
         return self.EvalDescriptor(m.match(/{{(.+)}}/)[1], xml)
      });
      html = html.replace(/{.+?}/g, (m) => {
         return data[m.match(/{(.+)}/)[1]]
      });
      if (!name) $("body").html(html);
      return $(html);
   };

   this.EvalDescriptor = function(descriptor, xmlDom) {
      let [sel, attr] = descriptor.split("@");
      if (sel) xmlDom = xmlDom.find(sel.trim());
      let text = xmlDom.attr(attr.trim()) || "";
      return text.replace(/\{\{(.*?)\}\}/, "[$1]");
   };

   this.XmlErrorCheck = function(){
      let err = 
         !self.invoice.length                         ? "Invoice not found"                     :
         self.HasElement("parsererror"              ) ? self.invoice.find("parsererror").text() :
         self.HasElement("html"                     ) ? "This is an html file"                  :
         self.HasElement("ConstituentAccountSummary") ? "This file is an old XML version"       :
         self.HasElement("InvoiceDocuments"         ) ? "This file is a combined Invoices xml"  :
         !self.HasElement("Invoice"                 ) ? "This file not an Invoice xml"          :
                                                        "";
      if (err) return $(".render").empty().append($("<h2>").text(err));
      return false;
   };

   this.HasElement = function(name) {
      return self.invoice.find(name).length;
   };

   this.UrlParam = function(name, defaultVal){
      let results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
      if(results) return decodeURIComponent(results[1]);
      return defaultVal;
   };

   this.ClearEvent = function(e){
      e.preventDefault();
      e.stopPropagation();
   };

   this.ToggleDebugView = function(e){
      $("h3:contains('Debug')").closest(".cdg").toggleClass("hidden");
   };

   this.Init();
}
